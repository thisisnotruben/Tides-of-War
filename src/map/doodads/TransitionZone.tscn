[gd_scene load_steps=5 format=2]

[ext_resource path="res://src/map/doodads/TransitionZone.cs" type="Script" id=1]

[sub_resource type="Shader" id=2]
code = "shader_type canvas_item;

//uniform float speed = 1.0f;
//uniform vec4 color: hint_color = vec4(1.0f);
//uniform sampler2D gradient: hint_white;

float line(vec2 p1, vec2 p2, float width, vec2 uv)
{
	float dist = distance(p1, p2); // Distance between points
	float dist_uv = distance(p1, uv); // Distance from p1 to current pixel

	// If point is on line, according to dist, it should match current UV
	// Ideally the '0.001' should be SCREEN_PIXEL_SIZE.x, but we can't use that outside of the fragment function.
	return 1.0 - floor(1.0 - (0.001 * width) + distance (mix(p1, p2, clamp(dist_uv / dist, 0.0, 1.0)),  uv));
}

void fragment()
{
	vec2 point1 = vec2(0.45, 0.2);
	vec2 point2 = vec2(0.55, 0.5);
	vec2 point3 = vec2(0.45, 0.8);
	
	vec3 color  = vec3(line(point1, point2, 2.0, UV));
		 color += vec3(line(point2, point3, 2.0, UV));
	
	COLOR = vec4(color, 1.0);
}"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )

[sub_resource type="CircleShape2D" id=1]
radius = 16.0

[node name="name_of_transition_zone" type="Area2D"]
material = SubResource( 3 )
monitorable = false
collision_layer = 0
collision_mask = 16
script = ExtResource( 1 )

[node name="collisionShape2D" type="CollisionShape2D" parent="."]
visible = false
shape = SubResource( 1 )
